// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="downsample,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.710250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24,HLS_SYN_LUT=150,HLS_VERSION=2018_3}" *)

module downsample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        absolute_value_V,
        downsample_num_V,
        datain_V_dout,
        datain_V_empty_n,
        datain_V_read,
        sumout_V,
        sumout_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] absolute_value_V;
input  [7:0] downsample_num_V;
input  [9:0] datain_V_dout;
input   datain_V_empty_n;
output   datain_V_read;
output  [13:0] sumout_V;
output   sumout_V_ap_vld;

reg ap_idle;
reg datain_V_read;
reg sumout_V_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    datain_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [8:0] ret_V_fu_105_p2;
reg   [7:0] downsample_cnt_V_1_fu_58;
wire   [7:0] downsample_cnt_V_fu_170_p2;
wire   [0:0] tmp_7_fu_165_p2;
reg   [13:0] totalsum_V_1_fu_62;
wire   [13:0] totalsum_V_fu_154_p2;
wire   [8:0] lhs_V_cast_fu_101_p1;
wire   [0:0] tmp_fu_117_p3;
wire   [0:0] rev_fu_125_p2;
wire   [0:0] or_cond_fu_131_p2;
wire   [9:0] tmp_2_fu_136_p2;
wire   [9:0] p_pn_fu_142_p3;
wire   [13:0] p_pn_cast_fu_150_p1;
wire   [8:0] tmp_6_cast_fu_161_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_165_p2 == 1'd0) & (datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        downsample_cnt_V_1_fu_58 <= downsample_cnt_V_fu_170_p2;
    end else if ((((tmp_7_fu_165_p2 == 1'd1) & (datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        downsample_cnt_V_1_fu_58 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_165_p2 == 1'd0) & (datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        totalsum_V_1_fu_62 <= totalsum_V_fu_154_p2;
    end else if ((((tmp_7_fu_165_p2 == 1'd1) & (datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        totalsum_V_1_fu_62 <= 14'd0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        datain_V_blk_n = datain_V_empty_n;
    end else begin
        datain_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        datain_V_read = 1'b1;
    end else begin
        datain_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_165_p2 == 1'd1) & (datain_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sumout_V_ap_vld = 1'b1;
    end else begin
        sumout_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign downsample_cnt_V_fu_170_p2 = (downsample_cnt_V_1_fu_58 + 8'd1);

assign lhs_V_cast_fu_101_p1 = downsample_num_V;

assign or_cond_fu_131_p2 = (rev_fu_125_p2 & absolute_value_V);

assign p_pn_cast_fu_150_p1 = p_pn_fu_142_p3;

assign p_pn_fu_142_p3 = ((or_cond_fu_131_p2[0:0] === 1'b1) ? tmp_2_fu_136_p2 : datain_V_dout);

assign ret_V_fu_105_p2 = ($signed(lhs_V_cast_fu_101_p1) + $signed(9'd511));

assign rev_fu_125_p2 = (tmp_fu_117_p3 ^ 1'd1);

assign sumout_V = (p_pn_cast_fu_150_p1 + totalsum_V_1_fu_62);

assign tmp_2_fu_136_p2 = (datain_V_dout ^ 10'd1023);

assign tmp_6_cast_fu_161_p1 = downsample_cnt_V_1_fu_58;

assign tmp_7_fu_165_p2 = ((tmp_6_cast_fu_161_p1 == ret_V_fu_105_p2) ? 1'b1 : 1'b0);

assign tmp_fu_117_p3 = datain_V_dout[32'd9];

assign totalsum_V_fu_154_p2 = (p_pn_cast_fu_150_p1 + totalsum_V_1_fu_62);

endmodule //downsample
